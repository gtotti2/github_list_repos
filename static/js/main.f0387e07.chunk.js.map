{"version":3,"sources":["components/template/Header.jsx","components/template/Main.jsx","components/repo/Link.jsx","components/home/List.jsx","components/home/Home.jsx","components/repo/RepoInfo.jsx","components/repo/Search.jsx","components/repo/Repo.jsx","main/Routes.jsx","components/template/Nav-item.jsx","components/template/Nav.jsx","components/template/Footer.jsx","main/App.jsx","serviceWorker.js","index.js"],"names":["template_Header","props","react_default","a","createElement","className","concat","icon","title","template_Main","react","children","repo_Link","Link","to","owner","name","headerProps","initialState","user","list","List","state","_this2","this","Axios","then","resp","setState","data","renderRows","repos","map","repo","key","id","login","notPrivateRepos","filter","private","renderNotPrivateRows","renderTable","renderList","Component","Home","List_List","commits","RepoInfo","location","split","length","twentyCommits","commit","index","renderTwentyCommits","info","author","email","message","date","renderRepos","results","searchText","searchTerm","onSearchChange","e","_this","target","value","handleSubmit","preventDefault","search","currentTarget","reset","query","method","url","headers","Accept","console","log","Object","assertThisInitialized","onSubmit","type","onChange","ref","input","placeholder","Repo","pathname","Search","RepoInfo_RepoInfo","Routes","Switch","Route","path","exact","component","Redirect","from","Nav_item","href","link","label","template_Nav","template_Footer","history","createHistory","basename","process","Boolean","window","hostname","match","ReactDOM","render","BrowserRouter","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f0387e07.chunk.js","sourcesContent":["import './Header.css'\r\nimport React from 'react'\r\n\r\nexport default props =>\r\n    <header className=\"header d-none d-sm-flex flex-column\">\r\n        <h1 className=\"mt-3\">\r\n            <i className={`fa fa-${props.icon}`}></i>{props.title}\r\n        </h1>\r\n    </header>","import './Main.css'\r\nimport React, { Fragment } from 'react'\r\nimport Header from './Header'\r\n\r\nexport default props =>\r\n    <Fragment>\r\n        <Header {...props} />\r\n        <main className=\"content container-fluid\">\r\n            <div className=\"p-3 mt-3\">{props.children}</div>\r\n        </main>   \r\n    </Fragment>","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default props =>\r\n    <Link to={`repository/${props.owner}/${props.name}`}>{props.name}</Link>","import React, { Component } from 'react'\r\nimport Axios from 'axios'\r\nimport Main from '../template/Main'\r\nimport Link from '../repo/Link'\r\n\r\nconst headerProps = {\r\n    icon: 'book',\r\n    title: 'Repositórios',\r\n}\r\nconst baseUrl = 'https://api.github.com/users/'\r\n\r\nconst initialState = {\r\n    user: \"\",\r\n    list: []\r\n}\r\n\r\n\r\nexport default class List extends Component {\r\n\r\n    state = { ...initialState }\r\n\r\n    componentWillMount() {\r\n        Axios(`${baseUrl}${this.props.user}/repos`).then(resp => {\r\n            this.setState({ list: resp.data })\r\n        })\r\n    }\r\n\r\n    renderTable() {\r\n        return (\r\n            <table>\r\n                <tbody>\r\n                    {this.renderRows()}\r\n                </tbody>\r\n            </table>\r\n        )\r\n    }\r\n\r\n    renderNotPrivateRows(repos) {\r\n        return (repos.map(repo => {\r\n            return (\r\n                <tr key={repo.id}>\r\n                    <td><Link owner={repo.owner.login} name={repo.name}/></td>\r\n                </tr>\r\n            )\r\n        }))\r\n    }\r\n    renderRows() {\r\n        let notPrivateRepos = this.state.list.filter((repo) => {\r\n            return !repo.private\r\n        })\r\n        return this.renderNotPrivateRows(notPrivateRepos)\r\n    }\r\n\r\n    renderList() {\r\n        return (\r\n            <div className=\"list\" >\r\n                <div className=\"row\">\r\n                    <div className=\"col-12\">{this.renderTable()}</div>\r\n                </div>\r\n                <hr />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Main {...headerProps}>{this.renderList()}</Main>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport Main from '../template/Main'\r\n\r\nimport List from './List'\r\n\r\nexport default props =>\r\n    <Main icon=\"home\" title=\"Listagem\">\r\n        <div className=\"display-4\">Bem vindo</div>\r\n        <hr />\r\n        <p className=\"mb-0\">Listagem de repositórios públicos</p>\r\n        <List user=\"reactjs\"/>\r\n    </Main>","import React, { Component } from 'react'\r\nimport Axios from 'axios'\r\nimport Main from '../template/Main'\r\n\r\nconst baseUrl = 'https://api.github.com/repos/'\r\n\r\nconst initialState = {\r\n    commits: [],\r\n}\r\n\r\nexport default class RepoInfo extends Component {\r\n\r\n    state = { ...initialState }\r\n\r\n    componentWillMount() {\r\n        Axios(`${baseUrl}${this.props.location.split('/')[this.props.location.split('/').length - 2]}/${this.props.location.split('/')[this.props.location.split('/').length - 1]}/commits`).then(resp => {\r\n            this.setState({ commits: resp.data })\r\n        })\r\n    }\r\n    renderRepos() {\r\n        return (\r\n            <div className=\"list\" >\r\n                <div className=\"row\">\r\n                    <div className=\"col-12\">{this.renderTable()}</div>\r\n                </div>\r\n                <hr />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderTable() {\r\n        return (\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <td>Autor: </td>\r\n                        <td>E-mail: </td>\r\n                        <td>Mensagem: </td>\r\n                        <td>Data: </td>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {this.renderRows()}\r\n                </tbody>\r\n            </table>\r\n        )\r\n    }\r\n    renderRows() {\r\n        let twentyCommits = this.state.commits.filter((commit, index) => {\r\n            return index < 20\r\n        })\r\n        return this.renderTwentyCommits(twentyCommits)\r\n    }\r\n    renderTwentyCommits(commits) {\r\n        return (commits.map((info, index) => {\r\n            return (\r\n                <tr key={index}>\r\n                    <td>{info.commit.author.name}</td>\r\n                    <td>{info.commit.author.email}</td>\r\n                    <td>{info.commit.message}</td>\r\n                    <td>{info.commit.author.date}</td>\r\n                </tr>\r\n            )\r\n        }))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Main>{this.renderRepos()}</Main>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Axios from 'axios'\r\n\r\n\r\nconst initialState = {\r\n    results: [],\r\n    searchText: ''\r\n}\r\n\r\n\r\n\r\nclass searchTerm extends Component {\r\n    \r\n\r\n    state = { ...initialState }\r\n\r\n    onSearchChange = e => {\r\n        this.setState({\r\n            searchText: e.target.value\r\n        });\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.search(this.state.searchText, this.props.repo, this.props.user)\r\n        e.currentTarget.reset();\r\n    }\r\n\r\n    search = (query, repo, user) => {\r\n        Axios({\r\n            method: 'get',\r\n            url: `https://api.github.com/search/commits?q=repo:${user}/${repo}+${query}`,\r\n            headers: { \"Accept\": \"application/vnd.github.cloak-preview\" },\r\n        }).then(resp => {\r\n            console.log(this)\r\n            this.setState({ results: resp.data })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form className=\"search-form\" onSubmit={this.handleSubmit}>\r\n                <input type=\"search\"\r\n                    onChange={this.onSearchChange}\r\n                    name=\"search\"\r\n                    ref={(input) => this.query = input}\r\n                    placeholder=\"Procurar...\" />\r\n                <button className=\"search-button\" type=\"submit\" id=\"submit\">Procurar</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default searchTerm;","import React from 'react'\r\nimport Main from '../template/Main'\r\nimport RepoInfo from './RepoInfo'\r\nimport Search from './Search'\r\n\r\n\r\nconst headerProps = {\r\n    icon: 'book',\r\n    title: 'Repositório',\r\n}\r\nexport default props =>\r\n    <Main {...headerProps}>\r\n        <div className=\"display-4\">Listagem de commits do repositório <b>{props.location.pathname.split('/')[3]}</b></div>\r\n        <hr />\r\n        <Search location={props.location.pathname} user={props.location.pathname.split('/')[2]} repo={props.location.pathname.split('/')[3]}/>\r\n        <RepoInfo location={props.location.pathname} />\r\n    </Main>\r\n","import React from 'react'\r\nimport { Switch, Route, Redirect } from 'react-router'\r\n\r\nimport Home from '../components/home/Home'\r\nimport Repo from '../components/repo/Repo'\r\n\r\n\r\nexport default props =>\r\n    <Switch>\r\n        <Route path='/' exact component={Home} />\r\n        <Route path='/repository' component={Repo} />\r\n        <Redirect from=\"*\" to='/' />\r\n    </Switch>","import './Nav.css'\r\nimport React from 'react'\r\n\r\n\r\nexport default props =>\r\n    <a href={props.link}>\r\n        <i className={`fa ${props.icon}`}></i>{props.label}\r\n    </a>","import './Nav.css'\r\nimport NavItem from './Nav-item';\r\nimport React from 'react'\r\n\r\nexport default props =>\r\n    <aside className=\"menu-area\">\r\n        <nav className=\"menu\">\r\n            <NavItem link=\"/\" icon=\"fa-home\" label=\" Início\" />\r\n        </nav>\r\n    </aside>","import './Footer.css'\r\nimport React from 'react'\r\n\r\nexport default props =>\r\n    <footer className=\"footer\">\r\n        <span>\r\n            Desenvolvido com <i className=\"fa fa-heart text-danger\"></i>\r\n        </span>\r\n    </footer>","import 'bootstrap/dist/css/bootstrap.min.css'\r\nimport 'font-awesome/css/font-awesome.min.css'\r\nimport './App.css'\r\nimport React from 'react'\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport createHistory from 'history/createBrowserHistory';\r\n\r\n\r\n\r\nimport Routes from './Routes'\r\n\r\nimport Nav from '../components/template/Nav'\r\n\r\nimport Footer from '../components/template/Footer'\r\n\r\nconst history = createHistory({\r\n    basename: process.env.PUBLIC_URL,\r\n  });\r\n\r\nexport default props =>\r\n\r\n    <BrowserRouter history={history} basename={process.env.PUBLIC_URL}>\r\n        <div className=\"app\">\r\n            <Nav />\r\n            <Routes />\r\n            <Footer />\r\n        </div>\r\n\r\n    </BrowserRouter>\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './main/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}